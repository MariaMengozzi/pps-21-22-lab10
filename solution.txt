% -------- Part 1 --------
% Es 1.1
% search ( Elem , List )
search(X, [X|_]).
search(X, [_|Xs]):- search(X, Xs).
% -- queries --
%search(a,[a,b,c]). -> y
%search(a,[c,d,e]). -> n
% -- iteration --
%search(X, [a,b,c]). -> a, b, c
% -- generation --
%search(a, X) -> generate all list that contains an a
%search(a,[X,b,Y,Z]). -> subsitute one variable with "a", 
%			so we obtain 3 results: X=a, Y=a, Z=a
%search(X,Y) -> generate infinite Y lists in which an element = X

%Es 1.2
%search2(Elem, List) -> looks for 2 consecutive occurences of Elem
search2 (X, [X, X|_]).
search2 (X, [_|Xs]):- search2 (X, Xs).
%search2(a,[b,c,a,a,d,e,a,a,g,h]). -> yes, yes
%search2(a,[b,c,a,a,a,d,e]). -> yes, yes
%search2(X,[b,c,a,a,d,d,e]). -> yes X=a, yes X=d
%search2(a,L). -> all lists with 2 consecutive a
%search2(a,[_,_,a,_,a,_]). -> 5 results, one for each possible substitution
% 			of _ with a whose result contains 2 consecutive a
% -------- Part 1 --------
% Es 1.1
% search ( Elem , List )
search(X, [X|_]).
search(X, [_|Xs]):- search(X, Xs).
% -- queries --
%search(a,[a,b,c]). -> y
%search(a,[c,d,e]). -> n
% -- iteration --
%search(X, [a,b,c]). -> a, b, c
% -- generation --
%search(a, X) -> generate all list that contains an a
%search(a,[X,b,Y,Z]). -> subsitute one variable with "a", 
%			so we obtain 3 results: X=a, Y=a, Z=a
%search(X,Y) -> generate infinite Y lists in which an element = X

%Es 1.2
%search2(Elem, List) -> looks for 2 consecutive occurences of Elem
search2 (X, [X, X|_]).
search2 (X, [_|Xs]):- search2 (X, Xs).
%search2(a,[b,c,a,a,d,e,a,a,g,h]). -> yes, yes
%search2(a,[b,c,a,a,a,d,e]). -> yes, yes
%search2(X,[b,c,a,a,d,d,e]). -> yes X=a, yes X=d
%search2(a,L). -> all lists with 2 consecutive a
%search2(a,[_,_,a,_,a,_]). -> 5 results, one for each possible substitution
% 			of _ with a whose result contains 2 consecutive a
