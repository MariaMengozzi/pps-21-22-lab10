% -------- Part 1 --------
% Es 1.1
% search ( Elem , List )
search(X, [X|_]).
search(X, [_|Xs]):- search(X, Xs).
% -- queries --
%search(a,[a,b,c]). -> y
%search(a,[c,d,e]). -> n
% -- iteration --
%search(X, [a,b,c]). -> a, b, c
% -- generation --
%search(a, X) -> generate all list that contains an a
%search(a,[X,b,Y,Z]). -> subsitute one variable with "a", 
%			so we obtain 3 results: X=a, Y=a, Z=a
%search(X,Y) -> generate infinite Y lists in which an element = X

%Es 1.2
%search2(Elem, List) -> looks for 2 consecutive occurences of Elem
search2(X, [X, X|_]).
search2(X, [_|Xs]):- search2(X, Xs).
%search2(a,[b,c,a,a,d,e,a,a,g,h]). -> yes, yes
%search2(a,[b,c,a,a,a,d,e]). -> yes, yes
%search2(X,[b,c,a,a,d,d,e]). -> yes X=a, yes X=d
%search2(a,L). -> all lists with 2 consecutive a
%search2(a,[_,_,a,_,a,_]). -> 5 results, one for each possible substitution
% 			of _ with a whose result contains 2 consecutive a

%Es 1.3
% search_two ( Elem , List )
% looks for two occurrences of Elem with any elements inbetween !
search_two(X, [X,_,X|_]).
search_two(X, [_|Xs]):- search_two(X, Xs).
%search_two(a,[b,c,a,a,d,e]). → no
%search_two(a,[b,c,a,d,a,d,e]). → yes
%search_two(a,L) -> generate all lists that has 2 occurences of a with any element in between

%Es 1.4
% search_anytwo ( Elem , List )
% looks for any Elem that occurs two times, anywhere
search_anytwo(X, [X|T]):- search(X, T).
search_anytwo(X, [_|T]):- search_anytwo(X, T).
%search_anytwo(a,[b,c,a,k,d,e]). → no
%search_anytwo(a,[b,c,a,a,d,e]). → yes

% -------- Part 2 --------
%Es 2.1
% size ( List , Size )
%Size will contain the number of elements in List
size([], 0) .
size([_|Xs], N):- size(Xs, N2), N is N2 + 1.
%size(L, 2).

%Es 2.2
% size ( List , Size )
% Size will contain the number of elements in List,
%	written using notation zero, s(zero), s(s(zero)) ..
peanosize([], zero) .
peanosize([_|Xs], s(N)):- peanosize(Xs, N).
%peanosize([a,b,c], X). -> X/s(s(s(zero)))




